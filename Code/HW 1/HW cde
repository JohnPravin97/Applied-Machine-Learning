{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW cde","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"8C4GDlE_NiAl","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","import os\n","import matplotlib.pyplot as plt\n","from sklearn.ensemble import RandomForestClassifier\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dzWTxex6N3ts","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1598997069526,"user_tz":240,"elapsed":1549,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"664af2e6-a0d1-469b-b2a4-a45d0bb235cb"},"source":["path = os.getcwd()\n","\n","print(path)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"72QgTkCwOKek","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"ok","timestamp":1598997069972,"user_tz":240,"elapsed":1972,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"0949f82f-4c76-4928-e5fa-d162344f92c0"},"source":["train = pd.read_csv(\"/content/madelon_train.data\",sep =' ',header=None)\n","train_label = pd.read_csv(\"/content/madelon_train.labels\",sep =' ',header=None)\n","test = pd.read_csv(\"/content/madelon_valid.data\",sep =' ',header=None)\n","test_label = pd.read_csv(\"/content/madelon_valid.labels\",sep =' ',header=None)\n","\n","print(train.head())\n","test_label.head()\n","print(train.mean())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["   0    1    2    3    4    5    6    ...  494  495  496  497  498  499  500\n","0  485  477  537  479  452  471  491  ...  511  485  481  479  475  496  NaN\n","1  483  458  460  487  587  475  526  ...  513  486  483  492  510  517  NaN\n","2  487  542  499  468  448  471  442  ...  506  501  480  489  499  498  NaN\n","3  480  491  510  485  495  472  417  ...  454  469  475  482  494  461  NaN\n","4  484  502  528  489  466  481  402  ...  486  508  481  504  495  511  NaN\n","\n","[5 rows x 501 columns]\n","0      481.7225\n","1      483.4525\n","2      510.1660\n","3      483.3845\n","4      501.6125\n","         ...   \n","496    478.2195\n","497    483.3090\n","498    507.9770\n","499    490.2660\n","500         NaN\n","Length: 501, dtype: float64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"al7Pn7kOGh7u","colab_type":"code","colab":{}},"source":["train = train.iloc[:,0:500].values\n","train_label = train_label.values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o5bN6ZbgEtmG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":134},"executionInfo":{"status":"ok","timestamp":1598997069984,"user_tz":240,"elapsed":1953,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"32fe3eca-474d-4d6f-afbd-84ee6dd35be6"},"source":["print(train_label)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[-1]\n"," [-1]\n"," [-1]\n"," ...\n"," [-1]\n"," [ 1]\n"," [ 1]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qN3hgslTBZtg","colab_type":"code","colab":{}},"source":["test_label = test_label.values\n","test = test.iloc[:,0:500].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4lOUA97GniM-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1598997069990,"user_tz":240,"elapsed":1933,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"b593b704-7ad9-4607-8475-a2102a968af4"},"source":["n = np.array([3,10,30,100,300])\n","\n","Forest_base_sqrt = []\n","Forest_base_ln = []\n","Forest_base_max =[]\n","\n","for num in n:\n","  mem = RandomForestClassifier(n_estimators=num,criterion='entropy',max_features='sqrt')\n","  mem1 = RandomForestClassifier(n_estimators=num,criterion='entropy',max_features= int(np.log(500)))\n","  mem2 = RandomForestClassifier(n_estimators=num,criterion='entropy',max_features= 500)\n","  \n","  Forest_base_sqrt.append(mem)\n","  Forest_base_ln.append(mem1)\n","  Forest_base_max.append(mem2)\n","\n","\n","print(Forest_base_sqrt,'\\n',Forest_base_ln,'\\n',Forest_base_max) \n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)] \n"," [RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)] \n"," [RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mDRPun-gwJq5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"status":"ok","timestamp":1598997086351,"user_tz":240,"elapsed":18274,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"dd2a73c1-dbe2-49b3-bf55-d1f58506b296"},"source":["predictors = []\n","train_pred = []\n","\n","for i in range(len(Forest_base_sqrt)):\n","  clf = Forest_base_sqrt[i]\n","  print(clf)\n","  clf.fit(train,train_label)\n","  predictors.append(clf)\n","  train_pred.append(clf.predict(train))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"uMctlXF5fRbA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"executionInfo":{"status":"ok","timestamp":1598997086358,"user_tz":240,"elapsed":18269,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"b7263e39-b30c-46fd-8e73-db4458bc93d7"},"source":["train_errors = []\n","train_erate =[]\n","\n","for k in range(len(Forest_base_sqrt)):\n","  count = 0\n","  for i in range(len(train_label)):\n","    if train_pred[k][i] != train_label[i] :\n","      count += 1\n","  train_errors.append(count)\n","  train_erate.append(count / len(train_label))\n","print(train_errors)\n","print(train_erate)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[142, 26, 0, 0, 0]\n","[0.071, 0.013, 0.0, 0.0, 0.0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jlVgVn8ZHD0V","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":689},"executionInfo":{"status":"ok","timestamp":1598997086360,"user_tz":240,"elapsed":18260,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"f8d17f2a-9b29-4a7b-f699-322fc412a292"},"source":["test_pred = []\n","\n","for i in range(len(Forest_base_sqrt)):\n","  clf = predictors[i]\n","  print(clf)\n","  test_pred.append(clf.predict(test))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features='sqrt',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GjFhTTAeHHAr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"executionInfo":{"status":"ok","timestamp":1598997086362,"user_tz":240,"elapsed":18251,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"55e002e4-de67-49d3-a6f2-6daf901559c7"},"source":["test_errors = []\n","test_erate =[]\n","\n","for k in range(len(Forest_base_sqrt)):\n","  count = 0\n","  for i in range(len(test_label)):\n","    if test_pred[k][i] != test_label[i] :\n","      count += 1\n","  test_errors.append(count)\n","  test_erate.append(count / len(test_label))\n","\n","print(test_errors)\n","print(test_erate)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[236, 231, 194, 157, 158]\n","[0.3933333333333333, 0.385, 0.3233333333333333, 0.26166666666666666, 0.2633333333333333]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LabyObkwHhzm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1598997086644,"user_tz":240,"elapsed":18524,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"6403aced-36fd-4a70-8c36-799356c50cf4"},"source":["train_acc = []\n","test_acc = []\n","for k in range(len(Forest_base_sqrt)):\n","  train_acc.append(predictors[k].score(train,train_label))\n","  test_acc.append(predictors[k].score(test,test_label))\n","\n","print(train_acc,test_acc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.929, 0.987, 1.0, 1.0, 1.0] [0.6066666666666667, 0.615, 0.6766666666666666, 0.7383333333333333, 0.7366666666666667]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pQ122kMxZi47","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":151},"executionInfo":{"status":"ok","timestamp":1598997086646,"user_tz":240,"elapsed":18517,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"e4133cb2-c05d-4231-a047-7dfdc5647755"},"source":["metric_data = {'Number of Trees': n,\n","        'Misclassifications (Training)': train_errors,\n","        'Training Error %': train_erate,\n","        'Training Accuracy': train_acc,\n","        'Misclassifications (Test)': test_errors,\n","        'Test Error %': test_erate,\n","        'Test Accuracy': test_acc\n","}\n","\n","df = pd.DataFrame(metric_data,columns=['Number of Trees','Misclassifications (Training)','Training Error %','Training Accuracy','Misclassifications (Test)','Test Error %','Test Accuracy'])\n","\n","print(df)\n","\n","df.to_csv(path + \"/HW1_RF_Sqrt.csv\",index=False,encoding='utf-8')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["   Number of Trees  Misclassifications (Training)  ...  Test Error %  Test Accuracy\n","0                3                            142  ...      0.393333       0.606667\n","1               10                             26  ...      0.385000       0.615000\n","2               30                              0  ...      0.323333       0.676667\n","3              100                              0  ...      0.261667       0.738333\n","4              300                              0  ...      0.263333       0.736667\n","\n","[5 rows x 7 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"btBhmhb0IeNP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"ok","timestamp":1598997087923,"user_tz":240,"elapsed":19783,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"f5643ab0-eeba-416e-9890-6f54b190ff82"},"source":["fig , axes = plt.subplots(1,2)\n","\n","fig.set_figwidth(15)\n","fig.set_figheight(5)\n","axes[0].set(xlabel='# of Trees',ylabel='Error %',xscale='log')\n","axes[0].set_title('Random Forest Errors sqrt(500) Feature Split')\n","axes[0].plot(n,train_erate,label='Training error rate')\n","axes[0].plot(n,test_erate,label='Test error rate')\n","axes[0].legend()\n","axes[0].grid()\n","\n","axes[1].set(xlabel='# of Trees',ylabel='Accuracy %',xscale='log')\n","axes[1].set_title('Random Forest Accuracy sqrt(500) Feature Split')\n","axes[1].plot(n,train_acc,label='Training Accuracy')\n","axes[1].plot(n,test_acc,label='Test Accuracy')\n","axes[1].legend()\n","axes[1].grid()\n","\n","fig.savefig('HW1_erracc_sqrt.png')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"lSxRrc8ZJEZB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1598997094996,"user_tz":240,"elapsed":26827,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"277d7e2d-8e83-4482-a09d-5dfe682faa9b"},"source":["#For n_features = ~ln(500) random\n","\n","predictors = []\n","train_pred = []\n","\n","for i in range(len(Forest_base_ln)):\n","  clf = Forest_base_ln[i]\n","  print(clf)\n","  clf.fit(train,train_label)\n","  predictors.append(clf)\n","  train_pred.append(clf.predict(train))\n","\n","train_errors = []\n","train_erate =[]\n","\n","for k in range(len(Forest_base_ln)):\n","  count = 0\n","  for i in range(len(train_label)):\n","    if train_pred[k][i] != train_label[i] :\n","      count += 1\n","  train_errors.append(count)\n","  train_erate.append(count / len(train_label))\n","print(train_errors)\n","print(train_erate)\n","\n","\n","test_pred = []\n","for i in range(len(Forest_base_ln)):\n","  clf = predictors[i]\n","  print(clf)\n","  test_pred.append(clf.predict(test))\n","\n","\n","test_errors = []\n","test_erate =[]\n","for k in range(len(Forest_base_ln)):\n","  count = 0\n","  for i in range(len(test_label)):\n","    if test_pred[k][i] != test_label[i] :\n","      count += 1\n","  test_errors.append(count)\n","  test_erate.append(count / len(test_label))\n","\n","print('Test errors: ',test_errors)\n","print(\"Error Rates: \",test_erate)\n","\n","\n","train_acc = []\n","test_acc = []\n","for k in range(len(Forest_base_ln)):\n","  train_acc.append(predictors[k].score(train,train_label))\n","  test_acc.append(predictors[k].score(test,test_label))\n","\n","print('Training Accuracy:',train_acc)\n","print('Test Accuracy:',test_acc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["[156, 25, 0, 0, 0]\n","[0.078, 0.0125, 0.0, 0.0, 0.0]\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=6,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","Test errors:  [249, 269, 253, 238, 214]\n","Error Rates:  [0.415, 0.4483333333333333, 0.4216666666666667, 0.39666666666666667, 0.3566666666666667]\n","Training Accuracy: [0.922, 0.9875, 1.0, 1.0, 1.0]\n","Test Accuracy: [0.585, 0.5516666666666666, 0.5783333333333334, 0.6033333333333334, 0.6433333333333333]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gO8XwBXXBogi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":151},"executionInfo":{"status":"ok","timestamp":1598997094999,"user_tz":240,"elapsed":26826,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"5f252717-6cea-4bbf-da7c-f7e38f667e58"},"source":["metric_data = {'Number of Trees': n,\n","        'Misclassifications (Training)': train_errors,\n","        'Training Error %': train_erate,\n","        'Training Accuracy': train_acc,\n","        'Misclassifications (Test)': test_errors,\n","        'Test Error %': test_erate,\n","        'Test Accuracy': test_acc\n","}\n","\n","df = pd.DataFrame(metric_data,columns=['Number of Trees','Misclassifications (Training)','Training Error %','Training Accuracy','Misclassifications (Test)','Test Error %','Test Accuracy'])\n","\n","print(df)\n","\n","df.to_csv(path + \"/HW1_RF_ln.csv\",index=False,encoding='utf-8')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["   Number of Trees  Misclassifications (Training)  ...  Test Error %  Test Accuracy\n","0                3                            156  ...      0.415000       0.585000\n","1               10                             25  ...      0.448333       0.551667\n","2               30                              0  ...      0.421667       0.578333\n","3              100                              0  ...      0.396667       0.603333\n","4              300                              0  ...      0.356667       0.643333\n","\n","[5 rows x 7 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ud642fMRnzGG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"ok","timestamp":1598997096399,"user_tz":240,"elapsed":28223,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"3d023346-7e08-4681-fb3d-3202cf310b96"},"source":["fig , axes = plt.subplots(1,2)\n","\n","fig.set_figwidth(15)\n","fig.set_figheight(5)\n","axes[0].set(xlabel='# of Trees',ylabel='Error %',xscale='log')\n","axes[0].set_title('Random Forest Errors ln(500) Feature Split')\n","axes[0].plot(n,train_erate,label='Training error rate')\n","axes[0].plot(n,test_erate,label='Test error rate')\n","axes[0].legend()\n","axes[0].grid()\n","\n","axes[1].set(xlabel='# of Trees',ylabel='Accuracy %',xscale='log')\n","axes[1].set_title('Random Forest Accuracy ln(500) Feature Split')\n","axes[1].plot(n,train_acc,label='Training Accuracy')\n","axes[1].plot(n,test_acc,label='Test Accuracy')\n","axes[1].legend()\n","axes[1].grid()\n","\n","fig.savefig('HW1_erracc_ln.png')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bN42Ab3tOGdM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1598997324341,"user_tz":240,"elapsed":256103,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"1075c3dc-92bb-4369-c5e4-18b06e19a86b"},"source":["#For n_features = 500 random\n","\n","predictors = []\n","train_pred = []\n","\n","for i in range(len(Forest_base_max)):\n","  clf = Forest_base_max[i]\n","  print(clf)\n","  clf.fit(train,train_label)\n","  predictors.append(clf)\n","  train_pred.append(clf.predict(train))\n","\n","train_errors = []\n","train_erate =[]\n","\n","for k in range(len(Forest_base_max)):\n","  count = 0\n","  for i in range(len(train_label)):\n","    if train_pred[k][i] != train_label[i] :\n","      count += 1\n","  train_errors.append(count)\n","  train_erate.append(count / len(train_label))\n","print(train_errors)\n","print(train_erate)\n","\n","\n","test_pred = []\n","for i in range(len(Forest_base_max)):\n","  clf = predictors[i]\n","  print(clf)\n","  test_pred.append(clf.predict(test))\n","\n","\n","test_errors = []\n","test_erate =[]\n","for k in range(len(Forest_base_max)):\n","  count = 0\n","  for i in range(len(test_label)):\n","    if test_pred[k][i] != test_label[i] :\n","      count += 1\n","  test_errors.append(count)\n","  test_erate.append(count / len(test_label))\n","\n","print('Test errors: ',test_errors)\n","print(\"Error Rates: \",test_erate)\n","\n","\n","train_acc = []\n","test_acc = []\n","for k in range(len(Forest_base_max)):\n","  train_acc.append(predictors[k].score(train,train_label))\n","  test_acc.append(predictors[k].score(test,test_label))\n","\n","print('Training Accuracy:',train_acc)\n","print('Test Accuracy:',test_acc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  import sys\n"],"name":"stderr"},{"output_type":"stream","text":["[114, 23, 2, 0, 0]\n","[0.057, 0.0115, 0.001, 0.0, 0.0]\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=3,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=30,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='entropy', max_depth=None, max_features=500,\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=300,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","Test errors:  [188, 125, 95, 94, 92]\n","Error Rates:  [0.31333333333333335, 0.20833333333333334, 0.15833333333333333, 0.15666666666666668, 0.15333333333333332]\n","Training Accuracy: [0.943, 0.9885, 0.999, 1.0, 1.0]\n","Test Accuracy: [0.6866666666666666, 0.7916666666666666, 0.8416666666666667, 0.8433333333333334, 0.8466666666666667]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2xFQUsp3Bv7Q","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":151},"executionInfo":{"status":"ok","timestamp":1598997324342,"user_tz":240,"elapsed":256100,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"5514e4e4-af48-4478-8abc-e2b15c2be450"},"source":["metric_data = {'Number of Trees': n,\n","        'Misclassifications (Training)': train_errors,\n","        'Training Error %': train_erate,\n","        'Training Accuracy': train_acc,\n","        'Misclassifications (Test)': test_errors,\n","        'Test Error %': test_erate,\n","        'Test Accuracy': test_acc\n","}\n","\n","df = pd.DataFrame(metric_data,columns=['Number of Trees','Misclassifications (Training)','Training Error %','Training Accuracy','Misclassifications (Test)','Test Error %','Test Accuracy'])\n","\n","print(df)\n","\n","df.to_csv(path + \"/HW1_RF_all.csv\",index=False,encoding='utf-8')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["   Number of Trees  Misclassifications (Training)  ...  Test Error %  Test Accuracy\n","0                3                            114  ...      0.313333       0.686667\n","1               10                             23  ...      0.208333       0.791667\n","2               30                              2  ...      0.158333       0.841667\n","3              100                              0  ...      0.156667       0.843333\n","4              300                              0  ...      0.153333       0.846667\n","\n","[5 rows x 7 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4O4FOMpKoaVc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"ok","timestamp":1598997325537,"user_tz":240,"elapsed":257292,"user":{"displayName":"grant steans","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQMq_Ls1kR5MuG6PAvVd-752pG_S5qJnHS2bV9OQ=s64","userId":"03949691656097169849"}},"outputId":"7d156464-c414-413a-da35-662318249ae3"},"source":["fig , axes = plt.subplots(1,2)\n","\n","fig.set_figwidth(15)\n","fig.set_figheight(5)\n","axes[0].set(xlabel='# of Trees',ylabel='Error %',xscale='log')\n","axes[0].set_title('Random Forest Errors 500 Feature Split')\n","axes[0].plot(n,train_erate,label='Training error rate')\n","axes[0].plot(n,test_erate,label='Test error rate')\n","axes[0].legend()\n","axes[0].grid()\n","\n","axes[1].set(xlabel='# of Trees',ylabel='Accuracy %',xscale='log')\n","axes[1].set_title('Random Forest Accuracy 500 Feature Split')\n","axes[1].plot(n,train_acc,label='Training Accuracy')\n","axes[1].plot(n,test_acc,label='Test Accuracy')\n","axes[1].legend()\n","axes[1].grid()\n","\n","fig.savefig('HW1_erracc_max.png')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}